// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/google/wire"
	"go-template-wire/configs"
	"go-template-wire/internal/controller"
	"go-template-wire/internal/middleware"
	"go-template-wire/internal/reusable_code"
	"go-template-wire/internal/router"
	"go-template-wire/internal/server"
	"go-template-wire/pkg/databases"
	"go-template-wire/pkg/http_client"
	"go-template-wire/pkg/logger"
	"go-template-wire/pkg/tracing"
)

// Injectors from deps.go:

// A Wire injector function that initialize all the app's dependencies
// The return will be filled in by Wire with providers from the provider sets in wire.Build
func initDeps(cfg *configs.Config) (*server.Server, error) {
	sugaredLogger := logger.New(cfg)
	healthCheckController := controller.NewHealthCheckController()
	db, err := databases.NewMySQLDB(cfg, sugaredLogger)
	if err != nil {
		return nil, err
	}
	module := reusablecode.NewModule(sugaredLogger, db)
	reusableCodeController := controller.NewReusableCodeController(sugaredLogger, module)
	controllers := &controller.Controllers{
		HealthCheck:  healthCheckController,
		ReusableCode: reusableCodeController,
	}
	internalAuthMiddleware := middleware.NewInternalAuthMiddleware(cfg)
	client, err := databases.NewFirebaseClient(sugaredLogger)
	if err != nil {
		return nil, err
	}
	jwtAuthMiddleware := middleware.NewJWTAuthMiddleware(client)
	authMiddlewares := &middleware.AuthMiddlewares{
		Internal: internalAuthMiddleware,
		JWT:      jwtAuthMiddleware,
	}
	engine := router.NewEngine(cfg, sugaredLogger, controllers, authMiddlewares)
	serverServer := server.New(cfg, sugaredLogger, engine)
	return serverServer, nil
}

// deps.go:

var infraSet = wire.NewSet(logger.New, databases.DatabaseSet, tracing.Init, httpclient.New)
